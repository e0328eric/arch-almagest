#=========================================================================#
#
#  This snippet is comparable with coprime class and vim --- Ver : 0.00b
#  almagest0328@gmail.com
#
#  coprime snippet, First Release Date : 2019/05/04
#  This snippet can be used from UltiSnipt plugin
#
#=========================================================================#

#=========================================================================#
#
# Basic Commands
#
#=========================================================================#

#DocumentClass
snippet "doc(( (\S+))|( (.+) \| (\S+)));" "Documentclass" brA
`!p
if '|' in match.group(1):
    classOption = match.group(5)
    className = match.group(6)
else:
    classOption = None
    className = match.group(3)
if classOption is None:
    snip.rv = '\\documentclass{' + className + '}'
else:
    snip.rv = '\\documentclass[' + classOption + ']{' + className + '}'
`
endsnippet

#Usepackage
snippet "pkg(( (\S+))|( (.+) \| (\S+)));" "Usepackage" brA
`!p
if '|' in match.group(1):
    packageOption = match.group(5)
    packageName = match.group(6)
else:
    packageOption = None
    packageName = match.group(3)
if packageOption is None:
    snip.rv = '\\usepackage{' + packageName + '}'
else:
    snip.rv = '\\usepackage[' + packageOption + ']{' + packageName + '}'
`
endsnippet

#Default begin/end
snippet "beg( (\S+))((( (.+))? \#(( (.+))?))|( (.+)))?;" "Begin Environment" brA
`!p
envStyle = match.group(2)
if match.group(3) is not None:
    if '#' in match.group(3):
        if '\\#' in match.group(3):
            if match.group(3)[1:] is not None:
                if envStyle in ['tabular','minipage','array']:
                    envExplain = '{' + match.group(3)[1:] + '}'
                else:
                    envExplain = '[' + match.group(3)[1:] + ']'
            else:
                envExplain = ''
            snip.rv = '\\begin{' + envStyle + '}' + envExplain
        else:
            if match.group(6) is not None:
                if envStyle in ['tabular','minipage']:
                    envExplain = '{' + match.group(6) + '}'
                else:
                    envExplain = '[' + match.group(6) + ']'
            else:
                envExplain = ''
            label = '\\label{' + match.group(9) + '}'
            snip.rv = '\\begin{' + envStyle + '}' + envExplain + ' ' + label
    else:
        if match.group(11) is not None:
            if envStyle in ['tabular','minipage']:
                envExplain = '{' + match.group(11) + '}'
            else:
                envExplain = '[' + match.group(11) + ']'
        else:
            envExplain = ''
        snip.rv = '\\begin{' + envStyle + '}' + envExplain
else:
    snip.rv = '\\begin{' + envStyle + '}'
`
$1
`!p snip.rv = '\\end{' + envStyle + '}'`
endsnippet

#center
snippet center "centering environment"
\begin{center}
$1
\end{center}
$0
endsnippet

#tikzcd
snippet tikzcd
\begin{tikzcd}[arrow style = tikz]
$1
\end{tikzcd}
$0
endsnippet

#=========================================================================#
#
# Math Commands
#
#=========================================================================#

#Basic Command
snippet MK "math mode" iA
$${1}$$0
endsnippet

#Display Style
snippet be
\[
    $1
\]
$0
endsnippet
snippet "eq( (.+))" "Equation" br
`!p
snip.rv = '\\begin{equation} \\label{' + match.group(2) + '}'
`
    $1
\end{equation}
endsnippet

#Aligning
snippet align
\begin{align*}
    $1
\end{align*}
$0
endsnippet

#Setminus
snippet - "setminus" i
\setminus
endsnippet

#Frac
snippet "((((\d+)|((\\)?[a-zA-Z]+))[\_\^]?((\d+)|((\\)?[a-zA-Z]+))?[\_\^]?((\d+)|((\\)?[a-zA-Z]+))?)|\#(.+))\/\/" "frac" irA
`!p
if '#' in match.group(1):
    snip.rv = '\\frac{' + str(match.group(1))[1:] + '}'
elif '(' in match.group(1):
    snip.rv = '\\frac{' + str(match.group(1))[1:-1] + '}'
else:
    snip.rv = '\\frac{' + match.group(1) + '}'
`{$2}$0
endsnippet

snippet "((((\d+)|((\\)?[a-zA-Z]+))[\_\^]?((\d+)|((\\)?[a-zA-Z]+))?[\_\^]?((\d+)|((\\)?[a-zA-Z]+))?)|\#(.+))\/\.\/" "frac" irA
`!p
if '#' in match.group(1):
    snip.rv = '\\tfrac{' + str(match.group(1))[1:] + '}'
elif '(' in match.group(1):
    snip.rv = '\\tfrac{' + str(match.group(1))[1:-1] + '}'
else:
    snip.rv = '\\tfrac{' + match.group(1) + '}'
`{$2}$0
endsnippet

#=========================================================================#
#
# Big Notations
#
#=========================================================================#

#sum
snippet sum "sumation" i
\sum_{$1}^{$2}$0
endsnippet

#product
snippet prod "Product" i
\prod_{$1}^{$2}$0
endsnippet

#union
snippet bcup "Bigcup" i
\bigcup_{$1}^{$2}$0
endsnippet

#intersection
snippet bcap "Bigcap" i
\bigcap_{$1}^{$2}$0
endsnippet

#integral
snippet int "Int" i
\int_{$1}^{$2}$0
endsnippet

#######Limits
#limit
snippet lim "limit" i
\lim_{$1\to ${2}}$0
endsnippet

#limsup
snippet lims "limit supremum" i
\limsup_{$1\to ${2}}$0
endsnippet

#liminf
snippet limi "limit infimum" i
\liminf_{$1\to ${2}}$0
endsnippet

#sup
snippet sup "supremum" i
\sup_{$1}$0
endsnippet

#inf
snippet inf "infimum" i
\inf_{$1}$0
endsnippet

#=========================================================================#
#
# Brackets
#
#=========================================================================#

#Bracket
snippet lrl "bracket" iA
\{$1\}$0
endsnippet

snippet lrr "bracket" iA
($1)$0
endsnippet

snippet LRR "bracket" iA
\left($1\right)$0
endsnippet

snippet lrb "bracket" iA
\\{$1\\}$0
endsnippet

snippet LRB "bracket" iA
\left\\{$1\right\\}$0
endsnippet

snippet lrs "bracket" iA
[$1]$0
endsnippet

snippet LRS "bracket" iA
\left[$1\right]$0
endsnippet

snippet lra "bracket" i
\langle $1\rangle
endsnippet

snippet LRA "bracket" iA
\left\langle $1\right\rangle
endsnippet

snippet abs "bracket" i
|$1|$0
endsnippet

snippet ABS "bracket" iA
\left|$1\right|$0
endsnippet

#####Misellenuous
snippet lp "Lp space" i
\\|$1\\|_{$2}^{$3}$0
endsnippet

snippet oo "infty" i
\infty
endsnippet
